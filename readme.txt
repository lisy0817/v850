1.将该文件夹内容拷贝到车机
2.chmod 755 bsp_upgrade.sh
3.运行bsp_upgrade.sh -k 升级kernel， 确保bsp_upgrade.sh和uImage在同一个目录
4.sync
5.reboot重启
6.chmod 755 v850，如果已经是可执行状态，可忽略

测试：

./v850 -h，有简单说明

参数说明，
	-h，帮助
	-t time，设置ack等待重发超时时间，单位ms，可以不指定，使用默认值，或者通过/sys接口动态指定，以下类似
	-g time，设置两帧之间间隔，单位ms
	-r time，设置接收数据超时时间，暂时用不到（该时间表示接收到3C包头，规定时间未接收到设定长度，舍弃当前接收数据帧）
	-d 1/0，是否打开mcu数据日志，1为打开，0为关闭，不使用该参数，保持原来默认状态
	-x 打开数据接收线程，不用跟参数，-x即打开，没有-x就不使用
	-f file 指定待发送命令保存文件

所有发送数据可配置到一个文件中，v850应用程序会打开文件，一行一行读取数据，然后发送给MCU，发送到最后一行，再从头开始发送，
默认文件为当前目录下的cmd.txt,可以使用”-f file“重新指定

cmd.txt中是要发送的数据，数据格式 “类型 + appid + data...”，不需要包头3C和长度及校验（可参考/sys/v850/write用法）
文件中的内容可自己添加N行，为了正确性，请与通信协议保持一致

示例：

1,建立cmd.txt文件，文件填充需要周期发送的命令（注意数据格式和应用ID不要超过协议规定值）
2，执行 ./v850 -x &(打开接收线程，接收从MCU发送过来的数据，测试时，直接丢弃，目的为清空驱动缓存)，
	或者 ./v850 &（不使用接收线程，仅仅发送数据到MCU）
	注：因为只有一个串口终端，最好加&，后台运行程序

3，通过ps | grep v850看程序是否运行起来
4，v850测试程序运行起来后，可以通过 cat /sys/v850/speed_tx和cat /sys/v850/speed_rx查看数据速率统计
5，需要动态改变帧间隔，ack丢失重发间隔，接收超时间隔，使用命令类似：
	echo 10 >/sys/v850/frame_retry
	echo 15 >/sys/v850/frame_gap
	echo 12 >/sys/v850/frame_rxtimeout

	命令：cat /sys/v850/frame_retry可以查看当前设定的时间，其它时间类似

